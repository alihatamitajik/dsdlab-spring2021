$date
	Wed Jun  2 08:16:44 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module processor_tb $end
$var wire 8 ! direct_read_data [7:0] $end
$var reg 1 " clk $end
$var reg 1 # direct_memory_write $end
$var reg 8 $ direct_read_address [7:0] $end
$var reg 8 % direct_write_address [7:0] $end
$var reg 8 & direct_write_data [7:0] $end
$var reg 1 ' haltN $end
$var reg 1 ( resetN $end
$var integer 32 ) i [31:0] $end
$scope module p $end
$var wire 1 " clk $end
$var wire 8 * data_from_memory [7:0] $end
$var wire 1 # direct_memory_write $end
$var wire 8 + direct_read_address [7:0] $end
$var wire 8 , direct_read_data [7:0] $end
$var wire 8 - direct_write_address [7:0] $end
$var wire 8 . direct_write_data [7:0] $end
$var wire 1 ' haltN $end
$var wire 8 / memory_read_address [7:0] $end
$var wire 8 0 memory_write_address [7:0] $end
$var wire 1 ( resetN $end
$var wire 8 1 top_of_stack [7:0] $end
$var wire 1 2 stack_full $end
$var wire 1 3 stack_empty $end
$var wire 8 4 operand [7:0] $end
$var wire 4 5 opcode [3:0] $end
$var wire 12 6 instruction [11:0] $end
$var reg 8 7 data_to_memory [7:0] $end
$var reg 8 8 data_to_stack [7:0] $end
$var reg 1 9 mem_write $end
$var reg 8 : next_pc [7:0] $end
$var reg 8 ; pc [7:0] $end
$var reg 1 < pop $end
$var reg 1 = push $end
$var reg 1 > s_flag $end
$var reg 4 ? stack_pointer [3:0] $end
$var reg 1 @ z_flag $end
$var integer 32 A i [31:0] $end
$upscope $end
$upscope $end
$scope module processor_tb $end
$scope module p $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000000 A
0@
b0 ?
0>
1=
0<
b0 ;
b10 :
09
b0 8
bx 7
b0 6
b0 5
b0 4
13
02
b0 1
b0 0
b0 /
bx .
bx -
b0 ,
b11111111 +
b0 *
bx )
0(
0'
bx &
bx %
b11111111 $
0#
0"
b0 !
$end
#5
b100000000 A
1"
#10
0"
b10000 &
b10000 .
b0 )
b0 %
b0 -
1#
1(
#15
b10000 8
b1 5
b100000000 6
1=
b10 :
b10000 *
1"
#20
0"
b11111111 &
b11111111 .
b1 %
b1 -
#25
b0 8
1=
b10 :
b11111111 0
b0 *
b11111111 /
b11111111 4
b111111111 6
1"
#30
0"
b0 &
b0 .
b1 )
b10 %
b10 -
#35
1"
#40
0"
b10111 &
b10111 .
b11 %
b11 -
#45
1"
#50
0"
b1100000 &
b1100000 .
b10 )
b100 %
b100 -
#55
1"
#60
0"
b100000 &
b100000 .
b11 )
b101 %
b101 -
#65
1"
#70
0"
b11111111 &
b11111111 .
b110 %
b110 -
#75
1"
#80
0"
b10000 &
b10000 .
b100 )
b111 %
b111 -
#85
1"
#90
0"
b11111111 &
b11111111 .
b1000 %
b1000 -
#95
1"
#100
0"
b10000 &
b10000 .
b101 )
b1001 %
b1001 -
#105
1"
#110
0"
b11111111 &
b11111111 .
b1010 %
b1010 -
#115
1"
#120
0"
b1100000 &
b1100000 .
b110 )
b1011 %
b1011 -
#125
1"
#130
0"
b0 &
b0 .
b111 )
b1100 %
b1100 -
#135
1"
#140
0"
b1100 &
b1100 .
b1101 %
b1101 -
#145
1"
#150
0"
b1110000 &
b1110000 .
b1000 )
b1110 %
b1110 -
#155
1"
#160
0"
b100000 &
b100000 .
b1001 )
b1111 %
b1111 -
#165
1"
#170
0"
b11111111 &
b11111111 .
b10000 %
b10000 -
#175
1"
#180
0"
b10001 &
b10001 .
b1010 )
b11111111 %
b11111111 -
#185
b10001 8
1=
b10 :
b10001 *
b10001 !
b10001 ,
1"
#190
0"
1'
0#
#195
b0 5
b10001 1
b10111 8
1=
b100 :
b10111 0
b0 *
b10111 /
b10111 4
03
b1 ?
b10111 6
b10 ;
1"
#200
0"
#205
b110 5
b10111 1
b100000 8
0=
b101 :
b100000 0
b100000 /
b100000 4
b10 ?
b11000100000 6
b100 ;
1"
#210
0"
#215
b101000 7
19
1<
b10 5
b101000 1
b111 :
b11111111 0
b10001 *
b11111111 /
b11111111 4
b1 ?
b1011111111 6
b101 ;
1"
#220
0"
#225
b101000 8
1=
b1 5
b0 1
09
0<
b1001 :
b111111111 6
b101000 *
b101000 !
b101000 ,
13
b0 ?
b111 ;
1"
#230
0"
#235
b101000 1
1=
b1011 :
03
b1 ?
b1001 ;
1"
#240
0"
#245
b110 5
b10000 8
0=
b1100 :
b0 0
b10000 *
b0 /
b0 4
b10 ?
b11000000000 6
b1011 ;
1"
#250
0"
#255
b1100 8
1=
b0 5
b1010000 1
b1110 :
b1100 0
b0 *
b1100 /
b1100 4
b1 ?
b1100 6
b1100 ;
1"
#260
0"
#265
b111 5
b1100 1
b100000 8
0=
b1111 :
b100000 0
b100000 /
b100000 4
b10 ?
b11100100000 6
b1110 ;
1"
#270
0"
#275
b1000100 7
19
1<
b10 5
b1000100 1
b10001 :
b11111111 0
b101000 *
b11111111 /
b11111111 4
b1 ?
b1011111111 6
b1111 ;
1"
#280
0"
#285
b0 8
1=
b0 5
b0 1
09
0<
b10011 :
b0 0
b0 /
b0 4
b10000 *
b1000100 !
b1000100 ,
13
b0 ?
b0 6
b10001 ;
1"
#290
0"
0'
#295
1"
#300
0"
